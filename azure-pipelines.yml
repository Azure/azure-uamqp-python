# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  MACOSX_DEPLOYMENT_TARGET: '10.6'
  OPENSSL_VERSION: '1.0.2q'
  OPENSSL_ROOT_DIR: $(Agent.TempDirectory)/openssl
jobs:
- job: 'MacOSOpenSSL'
  displayName: 'MacOS Shared OpenSSL'
  pool:
    vmImage: 'macOS-10.13'
  steps:
  - script: sudo xcode-select --switch /Applications/Xcode_9.4.1.app
    displayName: 'Select Xcode 9.4.1'
  - script: source ./build_openssl_osx.sh
    displayName: 'Build OpenSSL'
    env:
      DEST: $(Agent.TempDirectory)
      LDFLAGS: -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)
      CFLAGS: -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET)
  - task: PublishPipelineArtifact@0
    displayName: 'Publish OpenSSL artifact'
    inputs:
      artifactName: openssl.macos.$(OPENSSL_VERSION)
      targetPath: $(OPENSSL_ROOT_DIR)
- job: 'MacOS'
  dependsOn: 'MacOSOpenSSL'
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    matrix:
      Python27:
        python.version: '2.7.15'
        python.bin: 'python2'
      Python34:
        python.version: '3.4.4'
        python.bin: 'python3'
      Python35:
        python.version: '3.5.4'
        python.bin: 'python3'
      Python36:
        python.version: '3.6.7'
        python.bin: 'python3'
      Python37:
        python.version: '3.7.1'
        python.bin: 'python3'
    maxParallel: 1
  steps:
  - script: sudo xcode-select --switch /Applications/Xcode_9.4.1.app
    displayName: 'Select Xcode 9.4.1'
  - script: source ./install_python_osx.sh
    displayName: 'Install Official Python'
  - script: curl https://bootstrap.pypa.io/get-pip.py | /usr/local/bin/$(python.bin) && /usr/local/bin/$(python.bin) -m pip install -r dev_requirements.txt
    displayName: 'Install dependencies'
  - task: DownloadPipelineArtifact@0
    displayName: 'Download OpenSSL artifact'
    inputs:
      artifactName: openssl.macos.$(OPENSSL_VERSION)
      targetPath: $(OPENSSL_ROOT_DIR)
  - script: /usr/local/bin/$(python.bin) setup.py bdist_wheel
    displayName: 'Build uAMQP Wheel'
    env:
      CMAKE_OSX_DEPLOYMENT_TARGET: $(MACOSX_DEPLOYMENT_TARGET)
      CMAKE_OSX_ARCHITECTURES: 'i386;x86_64'
      UAMQP_USE_OPENSSL: 'True'
      UAMQP_REBUILD_PYX: 'True'
      OPENSSL_INCLUDE_DIR: $(OPENSSL_ROOT_DIR)/include
      LDFLAGS: -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET) -L$(OPENSSL_ROOT_DIR)/lib
      CFLAGS: -mmacosx-version-min=$(MACOSX_DEPLOYMENT_TARGET) -I$(OPENSSL_ROOT_DIR)/include
  - script: ls ./dist
    displayName: 'Check output'
  - task: PublishPipelineArtifact@0
    displayName: 'Publish wheel artifact'
    inputs:
      artifactName: wheel.macos.$(python.version)
      targetPath: 'dist'
# - job: 'Windowsx64'
#   pool:
#     vmImage: 'vs2017-win2016'
#   strategy:
#     matrix:
#       Python35:
#         python.version: '3.5'
#       Python36:
#         python.version: '3.6'
#       Python37:
#         python.version: '3.7'
#     maxParallel: 1
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '$(python.version)'
#       architecture: 'x64'
#   - script: python -m pip install --upgrade pip && pip install -r dev_requirements.txt
#     displayName: 'Install dependencies'  
#   - script: python setup.py bdist_wheel
#     displayName: 'Build uAMQP Wheel'
#     env:
#       UAMQP_REBUILD_PYX: 'True'
#   - script: dir dist
#     displayName: 'Check output'
# - job: 'Windowsx86'
#   pool:
#     vmImage: 'vs2017-win2016'
#   strategy:
#     matrix:
#       Python35:
#         python.version: '3.5'
#       Python36:
#         python.version: '3.6'
#       Python37:
#         python.version: '3.7'
#     maxParallel: 1
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '$(python.version)'
#       architecture: 'x86'
#   - script: python -m pip install --upgrade pip && pip install -r dev_requirements.txt
#     displayName: 'Install dependencies'  
#   - script: python setup.py bdist_wheel
#     displayName: 'Build uAMQP Wheel'
#     env:
#       UAMQP_REBUILD_PYX: 'True'
#   - script: dir dist
#     displayName: 'Check output'  
#- job: 'ManyLinux'
#  pool:
#    vmImage: 'Ubuntu 16.04'
#  strategy:
#    matrix:
#      Python27:
#        python.version: '2.7'
#      Python35:
#        python.version: '3.5'
#      Python36:
#        python.version: '3.6'
#      Python37:
#        python.version: '3.7'
#    maxParallel: 1

#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: '$(python.version)'
#      architecture: 'x64'

#  - script: python -m pip install --upgrade pip && pip install -r dev_requirements.txt
#    displayName: 'Install dependencies'

#  - script: |
#      pip install pytest
#      pytest tests --doctest-modules --junitxml=junit/test-results.xml
#    displayName: 'pytest'

#  - task: PublishTestResults@2
#    inputs:
#      testResultsFiles: '**/test-results.xml'
#      testRunTitle: 'Python $(python.version)'
#    condition: succeededOrFailed()

#- job: 'Publish'
#  dependsOn: 'Linux'
#  pool:
#    vmImage: 'Ubuntu 16.04'

#  steps:
#  - task: UsePythonVersion@0
#    inputs:
#      versionSpec: '3.x'
#      architecture: 'x64'

#  - script: python setup.py sdist
#    displayName: 'Build sdist'
