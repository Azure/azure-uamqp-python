# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  OpenSSLVersion: '1.0.2q'
  PythonVersion27: '2.7'
  PythonVersion34: '3.4'
  PythonVersion35: '3.5'
  PythonVersion36: '3.6'
  PythonVersion37: '3.7'
  PythonVersionPre: '3.8.0a1'

jobs:

- job: 'MacOS_OpenSSL'
  displayName: 'MacOS Shared OpenSSL'
  pool:
    vmImage: 'macOS-10.13'
  variables:
    MacOSXDeploymentTarget: '10.6'
  steps:
  - script: sudo xcode-select --switch /Applications/Xcode_9.4.1.app
    displayName: 'Select Xcode 9.4.1'
  - script: source ./build_openssl_osx.sh
    displayName: 'Build OpenSSL'
    env:
      DEST: $(Build.ArtifactStagingDirectory)
      OPENSSL_VERSION: $(OpenSSLVersion)
      MACOSX_DEPLOYMENT_TARGET: $(MacOSXDeploymentTarget)
      LDFLAGS: -mmacosx-version-min=$(MacOSXDeploymentTarget)
      CFLAGS: -mmacosx-version-min=$(MacOSXDeploymentTarget)
  - task: PublishPipelineArtifact@0
    displayName: 'Publish OpenSSL artifact'
    inputs:
      artifactName: openssl-macosx$(MacOSXDeploymentTarget)-$(OpenSSLVersion)
      targetPath: $(Build.ArtifactStagingDirectory)/openssl

- job: 'MacOS'
  dependsOn: 'MacOS_OpenSSL'
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    matrix:
      Python 2.7:
        MacOSXDeploymentTarget: '10.6'
        PythonVersion: '$(PythonVersion27)'
        PythonBin: 'python2'
      Python 3.4:
        MacOSXDeploymentTarget: '10.6'
        PythonVersion: '$(PythonVersion34)'
        PythonBin: 'python3'
      Python 3.5:
        MacOSXDeploymentTarget: '10.6'
        PythonVersion: '$(PythonVersion35)'
        PythonBin: 'python3'
      Python 3.6:
        MacOSXDeploymentTarget: '10.6'
        PythonVersion: '$(PythonVersion36)'
        PythonBin: 'python3'
      Python 3.7:
        MacOSXDeploymentTarget: '10.6'
        PythonVersion: '$(PythonVersion37)'
        PythonBin: 'python3'
      Python Prerelease:
        MacOSXDeploymentTarget: '10.9'
        PythonVersion: '$(PythonVersionPre)'
        PythonBin: 'python3'
  variables:
    OpenSSLDir: $(Agent.BuildDirectory)/openssl
    PythonVersion27: '2.7.15'
    PythonVersion34: '3.4.4'
    PythonVersion35: '3.5.4'
    PythonVersion36: '3.6.5'
    PythonVersion37: '3.7.0'
  steps:
  - task: DownloadPipelineArtifact@0
    displayName: 'Download OpenSSL artifact'
    inputs:
      artifactName: openssl-macosx10.6-$(OpenSSLVersion)
      targetPath: $(OpenSSLDir)
  - script: sudo xcode-select --switch /Applications/Xcode_9.4.1.app
    displayName: 'Select Xcode 9.4.1'
  - script: source ./install_python_osx.sh
    displayName: 'Install Official Python'
  - script: $(PythonBin) --version && curl -sS https://bootstrap.pypa.io/get-pip.py | $(PythonBin) && $(PythonBin) -m pip install -r dev_requirements.txt
    displayName: 'Install dependencies'
  - script: $(PythonBin) setup.py bdist_wheel
    displayName: 'Build uAMQP Wheel'
    env:
      MACOSX_DEPLOYMENT_TARGET: $(MacOSXDeploymentTarget)
      CMAKE_OSX_DEPLOYMENT_TARGET: $(MacOSXDeploymentTarget)
      CMAKE_OSX_ARCHITECTURES: 'i386;x86_64'
      UAMQP_USE_OPENSSL: 'True'
      UAMQP_REBUILD_PYX: 'True'
      OPENSSL_ROOT_DIR: $(OpenSSLDir)
      OPENSSL_INCLUDE_DIR: $(OpenSSLDir)/include
      LDFLAGS: -mmacosx-version-min=$(MacOSXDeploymentTarget) -L$(OpenSSLDir)/lib
      CFLAGS: -mmacosx-version-min=$(MacOSXDeploymentTarget) -I$(OpenSSLDir)/include
  - script: ls ./dist
    displayName: 'Check output'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish wheel artifact'
    inputs:
      pathToPublish: 'dist'
      artifactName: uamqp-macosx$(MacOSXDeploymentTarget)-$(PythonVersion)-whl

- job: 'Windows'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      x64 - Python 2.7:
        PythonVersion: '$(PythonVersion27)'
        PythonArchitecture: 'x64'
      x64 - Python 3.4:
        PythonVersion: '$(PythonVersion34)'
        PythonArchitecture: 'x64'
      x64 - Python 3.5:
        PythonVersion: '$(PythonVersion35)'
        PythonArchitecture: 'x64'
      x64 - Python 3.6:
        PythonVersion: '$(PythonVersion36)'
        PythonArchitecture: 'x64'
      x64 - Python 3.7:
        PythonVersion: '$(PythonVersion37)'
        PythonArchitecture: 'x64'
      x64 - Python Prerelease:
        PythonVersion: '$(PythonVersionPre)'
        PythonArchitecture: 'x64'
      x86 - Python 2.7:
        PythonVersion: '$(PythonVersion27)'
        PythonArchitecture: 'x86'
      x86 - Python 3.4:
        PythonVersion: '$(PythonVersion34)'
        PythonArchitecture: 'x86'
      x86 - Python 3.5:
        PythonVersion: '$(PythonVersion35)'
        PythonArchitecture: 'x86'
      x86 - Python 3.6:
        PythonVersion: '$(PythonVersion36)'
        PythonArchitecture: 'x86'
      x86 - Python 3.7:
        PythonVersion: '$(PythonVersion37)'
        PythonArchitecture: 'x86'
      x86 - Python Prerelease:
        PythonVersion: '$(PythonVersionPre)'
        PythonArchitecture: 'x86'
  variables:
    SkipWheel: '$(PythonVersion34)'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PythonVersion)'
      architecture: '$(PythonArchitecture)'
    displayName: 'Use Python Version'
    condition: ne(variables['PythonVersion'], variables['PythonVersionPre'])
  - powershell: |
      choco install python3 --pre --$(PythonArchitecture) --yes --no-progress --params "/InstallDir:C:\PythonPre"
      Write-Host "##vso[task.prependpath]C:\PythonPre\Scripts"
      Write-Host "##vso[task.prependpath]C:\PythonPre"
    displayName: 'Install Python Version'
    condition: eq(variables['PythonVersion'], variables['PythonVersionPre'])
  - powershell: |
     Invoke-WebRequest -UseBasicParsing -Uri https://download.microsoft.com/download/7/9/6/796EF2E4-801B-4FC4-AB28-B59FBF6D907B/VCForPython27.msi -OutFile VCForPython27.msi
     Start-Process -Wait -NoNewWindow msiexec.exe -ArgumentList "/i VCForPython27.msi /quiet /qn /norestart /log VCForPython27.log ALLUSERS=1"
     Get-Content VCForPython27.log
    displayName: 'Install Microsoft Visual C++ Compiler for Python 2.7'
    condition: eq(variables['PythonVersion'], variables['PythonVersion27'])
  - powershell: |
     python --version
     Invoke-WebRequest -UseBasicParsing -Uri https://bootstrap.pypa.io/get-pip.py | Select-Object -ExpandProperty Content | python
     python -m pip install -r dev_requirements.txt
    displayName: 'Install dependencies'
  - script: python setup.py bdist_wheel
    displayName: 'Build uAMQP Wheel'
    env:
      UAMQP_REBUILD_PYX: 'True'
    condition: not(contains(variables['SkipWheel'], variables['PythonVersion']))
  - script: dir dist
    displayName: 'Check output'
    condition: not(contains(variables['SkipWheel'], variables['PythonVersion']))
  - task: PublishBuildArtifacts@1
    displayName: 'Publish wheel artifact'
    inputs:
      pathToPublish: 'dist'
      artifactName: uamqp-win$(PythonArchitecture)-$(PythonVersion)-whl
    condition: not(contains(variables['SkipWheel'], variables['PythonVersion']))

- job: 'Linux'
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python 2.7:
        PythonVersion: '$(PythonVersion27)'
      Python 3.4:
        PythonVersion: '$(PythonVersion34)'
      Python 3.5:
        PythonVersion: '$(PythonVersion35)'
      Python 3.6:
        PythonVersion: '$(PythonVersion36)'
      Python 3.7:
        PythonVersion: '$(PythonVersion37)'
      Python Prerelease:
        PythonVersion: '$(PythonVersionPre)'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(PythonVersion)'
    displayName: 'Use Python Version'
    condition: ne(variables['PythonVersion'], variables['PythonVersionPre'])
  - script: |
     export DEBIAN_FRONTEND=noninteractive
     sudo add-apt-repository -y ppa:deadsnakes/ppa
     sudo apt-get update
     sudo apt-get -q -y install python3.8 python3.8-distutils python3.8-venv python3.8-dev
     sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
    displayName: 'Install Python Version'
    condition: eq(variables['PythonVersion'], variables['PythonVersionPre'])
  - script: python --version && curl -sS https://bootstrap.pypa.io/get-pip.py | python && python -m pip install -r dev_requirements.txt
    displayName: 'Install dependencies'
  - script: python setup.py bdist_wheel
    displayName: 'Build uAMQP Wheel'
    env:
      UAMQP_REBUILD_PYX: 'True'
  - script: ls ./dist
    displayName: 'Check output'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish wheel artifact'
    inputs:
      pathToPublish: 'dist'
      artifactName: uamqp-manylinux-$(PythonVersion)-whl

  # - script: pytest tests --doctest-modules --junitxml=junit/test-results.xml
  #   displayName: 'Run Tests'
  # - task: PublishTestResults@2
  #   inputs:
  #     testResultsFormat: 'JUnit'
  #     testResultsFiles: '**/test-results.xml'
  #     testRunTitle: 'Linux - Python $(PythonVersion)'
  #   condition: succeededOrFailed()