trigger:
  - master

variables:
  PythonVersion27: '2.7'
  PythonVersion35: '3.5'
  PythonVersion36: '3.6'
  PythonVersion37: '3.7'
  PythonVersion38: '3.8.0a2'

jobs:
  - job: 'sdist'
    displayName: 'Source Distribution'

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python Version'
        inputs:
          versionSpec: '$(PythonVersion37)'

      - script: |
          python --version
          curl -sS https://bootstrap.pypa.io/get-pip.py | python - --user
          python -m pip install --user -r dev_requirements.txt
          echo "##vso[task.prependpath]/home/vsts/.local/bin"
        displayName: 'Install dependencies'
      - script: python setup.py sdist
        displayName: 'Build uAMQP sdist'

      - script: ls ./dist
        displayName: 'Check output'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish sdist artifact'
        inputs:
          artifactName: uamqp-sdist
          pathToPublish: 'dist'

  - job: 'wheel'
    displayName: 'Wheel Distribution'

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python Version'
        inputs:
          versionSpec: '$(PythonVersion37)'

      - script: |
          python --version
          curl -sS https://bootstrap.pypa.io/get-pip.py | python - --user
          python -m pip install --user -r dev_requirements.txt
          echo "##vso[task.prependpath]/home/vsts/.local/bin"
        displayName: 'Install dependencies'
      - script: python setup.py bdist_wheel
        displayName: 'Build uAMQP wheel'

      - script: ls ./dist
        displayName: 'Check output'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish wheel artifact'
        inputs:
          artifactName: uamqp-wheel
          pathToPublish: 'dist'

  - job: 'Windows'

    pool:
      vmImage: 'vs2017-win2016'

    strategy:
      matrix:
        x64 Python 2.7:
          PythonArchitecture: 'x64'
          PythonVersion: '$(PythonVersion27)'
        x64 Python 3.5:
          PythonArchitecture: 'x64'
          PythonVersion: '$(PythonVersion35)'
        x64 Python 3.6:
          PythonArchitecture: 'x64'
          PythonVersion: '$(PythonVersion36)'
        x64 Python 3.7:
          PythonArchitecture: 'x64'
          PythonVersion: '$(PythonVersion37)'
         x64 Python 3.8:
          PythonArchitecture: 'x64'
          PythonVersion: '$(PythonVersion38)'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python Version'
        condition: ne(variables['PythonVersion'], variables['PythonVersion38'])
        inputs:
          architecture: '$(PythonArchitecture)'
          versionSpec: '$(PythonVersion)'

      - powershell: |
          choco install python3 --pre --$(PythonArchitecture) --yes --no-progress --params "/InstallDir:C:\PythonPre"
          Write-Host "##vso[task.prependpath]C:\PythonPre\Scripts"
          Write-Host "##vso[task.prependpath]C:\PythonPre"
        displayName: 'Install Python Version'
        condition: eq(variables['PythonVersion'], variables['PythonVersion38'])
      - powershell: |
          python --version
          Invoke-WebRequest -UseBasicParsing -Uri https://bootstrap.pypa.io/get-pip.py | Select-Object -ExpandProperty Content | python
          python -m pip install -r dev_requirements.txt
        displayName: 'Install dependencies'
      - script: python setup.py bdist_wheel
        displayName: 'Build uAMQP Wheel'

      - script: dir dist
        displayName: 'Check output'

      - powershell: |
          $whlfile = Get-ChildItem -Filter *.whl dist | Select-Object -First 1 -ExpandProperty Name
          python -m pip install --ignore-installed ./dist/$whlfile
          pytest tests --doctest-modules --junitxml=junit/test-results-c.xml
          pytest samples --doctest-modules --junitxml=junit/test-results-live.xml
        displayName: 'Run tests'
      - task: PublishTestResults@2
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-results-*.xml'
          testResultsFormat: 'JUnit'
          testRunTitle: 'Windows $(PythonArchitecture) Python $(PythonVersion)'

  - job: 'Linux'

    pool:
      vmImage: 'ubuntu-16.04'

    strategy:
      matrix:
        Python 2.7:
          PythonVersion: '$(PythonVersion27)'
        Python 3.5:
          PythonVersion: '$(PythonVersion35)'
        Python 3.6:
          PythonVersion: '$(PythonVersion36)'
        Python 3.7:
          PythonVersion: '$(PythonVersion37)'
         Python 3.8:
          PythonVersion: '$(PythonVersion38)'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python Version'
        condition: ne(variables['PythonVersion'], variables['PythonVersion38'])
        inputs:
          versionSpec: '$(PythonVersion)'

      - script: |
          export DEBIAN_FRONTEND=noninteractive
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get -q -y install python3.8 python3.8-distutils python3.8-venv python3.8-dev
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
        displayName: 'Install Python Version'
        condition: eq(variables['PythonVersion'], variables['PythonVersion38'])
      - script: |
          python --version
          curl -sS https://bootstrap.pypa.io/get-pip.py | python - --user
          python -m pip install --user -r dev_requirements.txt
          echo "##vso[task.prependpath]/home/vsts/.local/bin"
        displayName: 'Install dependencies'
      - script: python setup.py bdist_wheel
        displayName: 'Build uAMQP Wheel'

      - script: ls ./dist
        displayName: 'Check output'

      - script: |
          python -m pip install --user --ignore-installed ./dist/*.whl
          pytest tests --doctest-modules --junitxml=junit/test-results-c.xml
          pytest samples --doctest-modules --junitxml=junit/test-results-live.xml
        displayName: 'Run tests'
      - task: PublishTestResults@2
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-results-*.xml'
          testResultsFormat: 'JUnit'
          testRunTitle: 'Linux Python $(PythonVersion)'
