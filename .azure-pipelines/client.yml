trigger:
  - main

variables:
  GetPip: 'https://bootstrap.pypa.io/get-pip.py'

jobs:
  - job: 'sdist'
    displayName: 'Source Distribution'

    pool:
      vmImage: 'ubuntu-20.04'

    steps:
      - template: /.azure-pipelines/use-python-version.yml
        parameters:
          versionSpec: '3.9'

      - script: |
          echo "Prepending PATH environment variable with directory: $HOME/.local/bin"
          echo "##vso[task.prependpath]$HOME/.local/bin"
        displayName: 'Prepare PATH'

      - script: |
          python --version
          curl -sS $(GetPip) | python - --user
          python -m pip --version
          python -m pip install --user -r dev_requirements.txt
        displayName: 'Install dependencies'
      - script: python setup.py sdist
        displayName: 'Build uAMQP sdist'

      - script: ls ./dist
        displayName: 'Check output'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish sdist artifact'
        inputs:
          artifactName: uamqp-sdist
          pathToPublish: 'dist'

  - job: 'MacOS'

    pool:
      vmImage: 'macOS-11'

    variables:
      MacOSXDeploymentTarget: '10.9'
      OpenSSLDir: $(Agent.BuildDirectory)/openssl-macosx$(MacOSXDeploymentTarget)

    steps:
      - template: /.azure-pipelines/use-python-version.yml
        parameters:
          versionSpec: '3.9'

      - task: DownloadPipelineArtifact@1
        displayName: 'Download OpenSSL artifact'
        inputs:
          artifactName: openssl-macosx$(MacOSXDeploymentTarget)
          buildType: specific
          buildVersionToDownload: latest
          downloadPath: $(Agent.BuildDirectory)
          pipeline: 119 # azure-uamqp-python - openssl
          project: '29ec6040-b234-4e31-b139-33dc4287b756' # public

      - script: sudo ls /Applications/
        displayName: 'List All apps'

      - script: sudo xcode-select --switch /Applications/Xcode_13.1.app
        displayName: 'Select Xcode 13.1'

      - script: source ./install_python_osx.sh
        displayName: 'Install Official Python'

      - script: |
          echo "Prepending PATH environment variable with directory: /usr/local/bin"
          echo "##vso[task.prependpath]/usr/local/bin"
          export PYTHON_SHORT_VER=`echo $(PythonVersion) | cut -d . -f 1,2`
          echo "Prepending PATH environment variable with directory: $HOME/Library/Python/$PYTHON_SHORT_VER/bin"
          echo "##vso[task.prependpath]$HOME/Library/Python/$PYTHON_SHORT_VER/bin"
        displayName: 'Prepare PATH'

      - bash: |
          set -o errexit
          python -m pip install cibuildwheel==2.10.1
        displayName: Install cibuildwheel 2.10.1

      - pwsh: |
          cibuildwheel --output-dir dist .
        displayName: 'Build uAMQP Wheel'
        env:
          CIBW_PRERELEASE_PYTHONS: True
          CIBW_ARCHS_MACOS: x86_64 universal2

      - script: ls ./dist
        displayName: 'Check output'

      - script: |
          $(PythonBin) -m pip install --user --ignore-installed ./dist/*.whl
          pytest tests --doctest-modules --junitxml=junit/test-results-c.xml
          pytest samples --doctest-modules --junitxml=junit/test-results-live.xml
        displayName: 'Run tests'

      - task: PublishTestResults@2
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-results-*.xml'
          testResultsFormat: 'JUnit'
          testRunTitle: 'MacOS Python $(PythonVersion)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish wheel artifact'
        inputs:
          artifactName: uamqp-macosx$(MacOSXDeploymentTarget)-$(PythonVersion)-whl
          pathToPublish: 'dist'

  - job: 'Windows'

    pool:
      vmImage: 'windows-2019'

    steps:
      - template: /.azure-pipelines/use-python-version.yml
        parameters:
          versionSpec: '3.9'

      - powershell: |
          python --version
          Invoke-WebRequest -UseBasicParsing -Uri $(GetPip) | Select-Object -ExpandProperty Content | python
          python -m pip --version
          python -m pip install -r dev_requirements.txt
        displayName: 'Install dependencies'
        env:
          PYTHONWARNINGS: ignore:DEPRECATION

      - pwsh: |
          python -m pip install cibuildwheel==2.10.1
        displayName: Install cibuildwheel 2.10.1

      - pwsh: |
          cibuildwheel --output-dir dist .
        displayName: 'Build uAMQP Wheel'
        env:
          CIBW_PRERELEASE_PYTHONS: True

      - script: ls ./dist
        displayName: 'Check output'

      ## we will need to update this. this won't do the write thing when we are generating multiple wheels
      - powershell: |
          $whlfile = Get-ChildItem -Filter *.whl dist | Select-Object -First 1 -ExpandProperty Name
          python -m pip install --ignore-installed ./dist/$whlfile
          pytest tests --doctest-modules --junitxml=junit/test-results-c.xml
          pytest samples --doctest-modules --junitxml=junit/test-results-live.xml
        displayName: 'Run tests'

      - task: PublishTestResults@2
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-results-*.xml'
          testResultsFormat: 'JUnit'
          testRunTitle: 'Windows $(PythonArchitecture) Python $(PythonVersion)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish wheel artifact'
        inputs:
          artifactName: uamqp-win$(PythonArchitecture)-$(PythonVersion)-whl
          pathToPublish: 'dist'

  - job: 'Linux'

    pool:
      vmImage: 'ubuntu-20.04'

    steps:
      - template: /.azure-pipelines/use-python-version.yml
        parameters:
          versionSpec: '3.9'

      - script: |
          echo "Prepending PATH environment variable with directory: $HOME/.local/bin"
          echo "##vso[task.prependpath]$HOME/.local/bin"
        displayName: 'Prepare PATH'

      - script: |
          python --version
          curl -sS $(GetPip) | python - --user
          python -m pip --version
          python -m pip install --user -r dev_requirements.txt
        displayName: 'Install dependencies'

      - bash: |
          set -o errexit
          python -m pip install cibuildwheel==2.10.1
        displayName: Install cibuildwheel 2.10.1

      - pwsh: |
          cibuildwheel --output-dir dist .
        displayName: 'Build uAMQP Wheel'
        env:
          CIBW_PRERELEASE_PYTHONS: True

      - script: ls ./dist
        displayName: 'Check output'

      - script: |
          python -m pip install --user --ignore-installed ./dist/*.whl
          pytest tests --doctest-modules --junitxml=junit/test-results-c.xml
          pytest samples --doctest-modules --junitxml=junit/test-results-live.xml
        displayName: 'Run tests'

      - task: PublishTestResults@2
        displayName: 'Publish test results'
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-results-*.xml'
          testResultsFormat: 'JUnit'
          testRunTitle: 'Linux Python $(PythonVersion)'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish wheel artifact'
        inputs:
          artifactName: uamqp-linux-$(PythonVersion)-whl
          pathToPublish: 'dist'

